[{"F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\index.js":"1","F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\App.js":"2","F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\reportWebVitals.js":"3","F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\components\\Task\\Task.js":"4","F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\firebase.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":1903,"mtime":1609663423026,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1885,"mtime":1609662185512,"results":"10","hashOfConfig":"7"},{"size":457,"mtime":1609525829247,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1fk8ifm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\index.js",[],["24","25"],"F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\App.js",["26"],"import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport firebase from 'firebase';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\n\nimport './App.css';\nimport db from './firebase';\nimport Task from './components/Task/Task';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [input, setInput] = useState('');\n\n  // when the app loads, we need to listen to the database and fetch new tasks as they get added/removed\n  useEffect(() => {\n    //this code here...fires when the app loads\n    db.collection('tasks')\n      .orderBy('timestamp', 'desc')\n      .onSnapshot((snapshot) => {\n        setTasks(\n          snapshot.docs.map((doc) => ({ id: doc.id, task: doc.data().task }))\n        );\n      });\n  }, []);\n\n  const addTask = (event) => {\n    // this will fire off when we click the button \"Add Task\"\n    event.preventDefault(); // stop the REFRESH of the page and keep the short term memory\n\n    db.collection('tasks').add({\n      task: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(''); // clear up the input field after pressing the \"Add Task\" button\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>To-DoER</h1>\n\n      <form>\n        <FormControl>\n          <InputLabel>Write a task</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n          <br />\n          <Button\n            type=\"submit\"\n            onClick={addTask}\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!input}\n          >\n            Add Task\n          </Button>\n        </FormControl>\n      </form>\n\n      <ul>\n        {tasks.map((task) => (\n          <Task task={task} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\reportWebVitals.js",[],"F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\components\\Task\\Task.js",[],"F:\\Front-End-Dev\\React\\to-doer\\to-doer\\src\\firebase.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":4,"column":8,"nodeType":"33","messageId":"34","endLine":4,"endColumn":30},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'FormatListBulletedIcon' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]